from flask import Flask, jsonify, send_file, redirect
from flask_cors import CORS
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import io

app = Flask(__name__)
CORS(app)  # Enable CORS for the entire app

# Define the API endpoint
@app.route('/api/get-district-counts')
def get_district_counts():
    base_url = "https://www.manoramaonline.com/tagresults.html?tag=mo%3Acrime%2Froadaccident&page="
    districts = ["thiruvananthapuram", "kollam", "pathanamthapuram", "alappuzha",
                 "kottayam", "idukki", "ernakulam", "thrissur", "palakkad",
                 "malappuram", "kozhikode", "wayanad", "kannur", "kasaragod"]

    district_counts = {district: 0 for district in districts}

    try:
        # Scrape and process data from the website
        for page_number in range(1, 6):
            url = base_url + str(page_number)
            response = requests.get(url)

            if response.status_code == 200:
                soup = BeautifulSoup(response.content, "html.parser")
                news_titles = soup.find_all('a', class_='cmp-story-list__pretitle')

                for title_tag in news_titles:
                    title = title_tag.get('title')

                    # Check if the title contains a district name
                    for district in districts:
                        if district.lower() in title.lower():
                            district_counts[district] += 1
            else:
                return jsonify({'error': f'Failed to retrieve data from {url}. Status code: {response.status_code}'}), 500

        # Plotting the bar graph
        plt.figure(figsize=(10, 6))
        plt.bar(district_counts.keys(), district_counts.values(), color='skyblue')
        plt.xlabel('Districts')
        plt.ylabel('Count')
        plt.title('Accidents in Kerala: District Counts')
        plt.xticks(rotation=90, ha='right')
        plt.tight_layout()

        # Save the bar graph as a PNG image in memory
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png')
        img_buffer.seek(0)
        plt.close()  # Close the plot

        # Send the image as a response
        return send_file(img_buffer, mimetype='image/png')

    except Exception as e:
        return jsonify({'error': str(e)}), 500

# Define a root endpoint that redirects to the API endpoint
@app.route('/')
def root():
    return redirect('/api/get-district-counts')

# Run the app
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
